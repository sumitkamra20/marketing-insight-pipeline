-- Snowflake Data Ingestion Script for Marketing Insight Pipeline
-- This script creates the necessary objects and loads data from CSV files
-- Updated for MARKETING_INSIGHTS_DB setup using ACCOUNTADMIN role

-- Use ACCOUNTADMIN role for guaranteed permissions
USE ROLE ACCOUNTADMIN;
USE WAREHOUSE MARKETING_WH;
USE DATABASE MARKETING_INSIGHTS_DB;
USE SCHEMA RAW;

-- Create file format for CSV parsing
CREATE OR REPLACE FILE FORMAT MARKETING_INSIGHTS_DB.RAW.csv_format
  TYPE = 'CSV'
  FIELD_DELIMITER = ','
  RECORD_DELIMITER = '\n'
  SKIP_HEADER = 1
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  TRIM_SPACE = TRUE
  ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
  ESCAPE = 'NONE'
  ESCAPE_UNENCLOSED_FIELD = '\134'
  DATE_FORMAT = 'AUTO'
  TIMESTAMP_FORMAT = 'AUTO';

-- Create tables with DDL from schema analysis

-- 1. Customers table (renamed from CustomersData)
CREATE OR REPLACE TABLE MARKETING_INSIGHTS_DB.RAW.CUSTOMERS (
    CUSTOMERID NUMBER NOT NULL,
    GENDER VARCHAR(1) NOT NULL,
    LOCATION VARCHAR(13) NOT NULL,
    TENURE_MONTHS NUMBER NOT NULL
);

-- 2. Tax_amount table
CREATE OR REPLACE TABLE MARKETING_INSIGHTS_DB.RAW.TAX_AMOUNT (
    PRODUCT_CATEGORY VARCHAR(20) NOT NULL,
    GST FLOAT NOT NULL
);

-- 3. Marketing_Spend table
CREATE OR REPLACE TABLE MARKETING_INSIGHTS_DB.RAW.MARKETING_SPEND (
    DATE VARCHAR(10) NOT NULL,
    OFFLINE_SPEND NUMBER NOT NULL,
    ONLINE_SPEND FLOAT NOT NULL
);

-- 4. Discount_Coupon table
CREATE OR REPLACE TABLE MARKETING_INSIGHTS_DB.RAW.DISCOUNT_COUPON (
    MONTH VARCHAR(3) NOT NULL,
    PRODUCT_CATEGORY VARCHAR(20) NOT NULL,
    COUPON_CODE VARCHAR(7) NOT NULL,
    DISCOUNT_PCT NUMBER NOT NULL
);

-- 5. Online_Sales table
CREATE OR REPLACE TABLE MARKETING_INSIGHTS_DB.RAW.ONLINE_SALES (
    CUSTOMERID NUMBER NOT NULL,
    TRANSACTION_ID NUMBER NOT NULL,
    TRANSACTION_DATE VARCHAR(10) NOT NULL,
    PRODUCT_SKU VARCHAR(14) NOT NULL,
    PRODUCT_DESCRIPTION VARCHAR(59) NOT NULL,
    PRODUCT_CATEGORY VARCHAR(20) NOT NULL,
    QUANTITY NUMBER NOT NULL,
    AVG_PRICE FLOAT NOT NULL,
    DELIVERY_CHARGES FLOAT NOT NULL,
    COUPON_STATUS VARCHAR(8) NOT NULL
);

-- Create internal stage for file uploads
CREATE OR REPLACE STAGE MARKETING_INSIGHTS_DB.RAW.csv_stage;

-- Check what files are in the stage (run this after uploading files)
LIST @MARKETING_INSIGHTS_DB.RAW.csv_stage;

-- Load data using COPY INTO commands
-- Note: Upload your CSV files to the stage first using Snowflake Web UI or PUT commands

-- Load Customers (from CustomersData.csv)
COPY INTO MARKETING_INSIGHTS_DB.RAW.CUSTOMERS
FROM @MARKETING_INSIGHTS_DB.RAW.csv_stage/CustomersData.csv
FILE_FORMAT = (FORMAT_NAME = MARKETING_INSIGHTS_DB.RAW.csv_format)
ON_ERROR = 'ABORT_STATEMENT';

-- Load Tax_amount
COPY INTO MARKETING_INSIGHTS_DB.RAW.TAX_AMOUNT
FROM @MARKETING_INSIGHTS_DB.RAW.csv_stage/Tax_amount.csv
FILE_FORMAT = (FORMAT_NAME = MARKETING_INSIGHTS_DB.RAW.csv_format)
ON_ERROR = 'ABORT_STATEMENT';

-- Load Marketing_Spend
COPY INTO MARKETING_INSIGHTS_DB.RAW.MARKETING_SPEND
FROM @MARKETING_INSIGHTS_DB.RAW.csv_stage/Marketing_Spend.csv
FILE_FORMAT = (FORMAT_NAME = MARKETING_INSIGHTS_DB.RAW.csv_format)
ON_ERROR = 'ABORT_STATEMENT';

-- Load Discount_Coupon
COPY INTO MARKETING_INSIGHTS_DB.RAW.DISCOUNT_COUPON
FROM @MARKETING_INSIGHTS_DB.RAW.csv_stage/Discount_Coupon.csv
FILE_FORMAT = (FORMAT_NAME = MARKETING_INSIGHTS_DB.RAW.csv_format)
ON_ERROR = 'ABORT_STATEMENT';

-- Load Online_Sales
COPY INTO MARKETING_INSIGHTS_DB.RAW.ONLINE_SALES
FROM @MARKETING_INSIGHTS_DB.RAW.csv_stage/Online_Sales.csv
FILE_FORMAT = (FORMAT_NAME = MARKETING_INSIGHTS_DB.RAW.csv_format)
ON_ERROR = 'ABORT_STATEMENT';

-- Verify data loads
SELECT 'CUSTOMERS' as table_name, COUNT(*) as row_count
FROM MARKETING_INSIGHTS_DB.RAW.CUSTOMERS
UNION ALL
SELECT 'TAX_AMOUNT' as table_name, COUNT(*) as row_count
FROM MARKETING_INSIGHTS_DB.RAW.TAX_AMOUNT
UNION ALL
SELECT 'MARKETING_SPEND' as table_name, COUNT(*) as row_count
FROM MARKETING_INSIGHTS_DB.RAW.MARKETING_SPEND
UNION ALL
SELECT 'DISCOUNT_COUPON' as table_name, COUNT(*) as row_count
FROM MARKETING_INSIGHTS_DB.RAW.DISCOUNT_COUPON
UNION ALL
SELECT 'ONLINE_SALES' as table_name, COUNT(*) as row_count
FROM MARKETING_INSIGHTS_DB.RAW.ONLINE_SALES
ORDER BY row_count DESC;

-- Grant access back to TRANSFORM role (so dbt can use these tables)
GRANT ALL ON SCHEMA MARKETING_INSIGHTS_DB.RAW TO ROLE TRANSFORM;
GRANT ALL ON ALL TABLES IN SCHEMA MARKETING_INSIGHTS_DB.RAW TO ROLE TRANSFORM;
GRANT USAGE ON FILE FORMAT MARKETING_INSIGHTS_DB.RAW.csv_format TO ROLE TRANSFORM;
GRANT USAGE ON STAGE MARKETING_INSIGHTS_DB.RAW.csv_stage TO ROLE TRANSFORM;

-- Optional: Create primary keys for better performance
-- ALTER TABLE MARKETING_INSIGHTS_DB.RAW.CUSTOMERS ADD PRIMARY KEY (CUSTOMERID);
-- ALTER TABLE MARKETING_INSIGHTS_DB.RAW.TAX_AMOUNT ADD PRIMARY KEY (PRODUCT_CATEGORY);

-- Sample data validation queries
SELECT 'Data validation completed' as status;

-- Check for duplicate customers
SELECT 'Checking for duplicate customers...' as check_name;
SELECT CUSTOMERID, COUNT(*) as duplicate_count
FROM MARKETING_INSIGHTS_DB.RAW.CUSTOMERS
GROUP BY CUSTOMERID
HAVING COUNT(*) > 1;

-- Check transaction date ranges
SELECT 'Checking transaction date ranges...' as check_name;
SELECT
    MIN(TRANSACTION_DATE) as min_date,
    MAX(TRANSACTION_DATE) as max_date,
    COUNT(DISTINCT TRANSACTION_DATE) as unique_dates
FROM MARKETING_INSIGHTS_DB.RAW.ONLINE_SALES;

-- Revenue summary by product category
SELECT 'Revenue summary by product category...' as check_name;
SELECT
    PRODUCT_CATEGORY,
    SUM(QUANTITY * AVG_PRICE) as total_revenue,
    COUNT(DISTINCT TRANSACTION_ID) as total_transactions,
    COUNT(DISTINCT CUSTOMERID) as unique_customers
FROM MARKETING_INSIGHTS_DB.RAW.ONLINE_SALES
GROUP BY PRODUCT_CATEGORY
ORDER BY total_revenue DESC;

-- Final summary
SELECT 'FINAL INGESTION SUMMARY' as metric, '' as value
UNION ALL
SELECT 'Total Customers', COUNT(*)::VARCHAR FROM MARKETING_INSIGHTS_DB.RAW.CUSTOMERS
UNION ALL
SELECT 'Total Transactions', COUNT(*)::VARCHAR FROM MARKETING_INSIGHTS_DB.RAW.ONLINE_SALES
UNION ALL
SELECT 'Total Revenue', '$' || ROUND(SUM(QUANTITY * AVG_PRICE), 2)::VARCHAR
    FROM MARKETING_INSIGHTS_DB.RAW.ONLINE_SALES
UNION ALL
SELECT 'Status', 'Data ingestion completed successfully!' as value;
